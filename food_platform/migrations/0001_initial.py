# Generated by Django 3.1.1 on 2020-09-14 23:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import food_platform.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_foodriver', models.BooleanField(default=False)),
                ('is_foodonator', models.BooleanField(default=False)),
                ('is_shelter', models.BooleanField(default=False)),
                ('profile_Image', models.ImageField(default='img/default-image.png', upload_to=food_platform.models.get_image_path)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interested_area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('color', models.CharField(default='#007bff', max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='Pickup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('interested_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pickups', to='food_platform.interested_area')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pickups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Foodriver',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='food_platform.customuser')),
                ('area', models.ManyToManyField(related_name='interested_foodrivers', to='food_platform.Interested_area')),
            ],
        ),
        migrations.CreateModel(
            name='ShelterInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='Shelter', max_length=30)),
                ('dropoff_time', models.TimeField()),
                ('slug', models.CharField(blank=True, editable=False, help_text='Unique URL path to access this shelter info. Generated by the system.', max_length=600)),
                ('homeless_residents', models.IntegerField(help_text='How many residents are you having this week?')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The date and time this info was created. Automatically generated when the model saves.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='The date and time this info was updated. Automatically generated when the model updates.')),
                ('author', models.ForeignKey(help_text='The user that posted this article.', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PickupTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.DateTimeField()),
                ('pickup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pickup_times', to='food_platform.pickup')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='Answer')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Correct answer')),
                ('pickup_time', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='food_platform.pickuptime')),
            ],
        ),
        migrations.CreateModel(
            name='TakenPickup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('pickup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taken_pickups', to='food_platform.pickup')),
                ('foodriver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taken_pickups', to='food_platform.foodriver')),
            ],
        ),
        migrations.CreateModel(
            name='FoodriverAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='food_platform.answer')),
                ('foodriver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pickup_answers', to='food_platform.foodriver')),
            ],
        ),
        migrations.AddField(
            model_name='foodriver',
            name='pickups',
            field=models.ManyToManyField(through='food_platform.TakenPickup', to='food_platform.Pickup'),
        ),
    ]
